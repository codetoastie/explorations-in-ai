# -*- coding: utf-8 -*-
"""Meeting minutes from audio file.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17mE_8_HsPNt4B5Ih5a5TIqLC0HKa7jNw
"""

!pip install -q requests torch bitsandbytes transformers sentencepiece accelerate openai

import os
import requests
from IPython.display import Markdown, display, update_display
from openai import OpenAI
from google.colab import userdata, drive
from huggingface_hub import login
from transformers import AutoTokenizer, AutoModelForCausalLM, TextStreamer, BitsAndBytesConfig
import torch

AUDIO_MODEL = "whisper-1"
LLAMA = "meta-llama/Meta-Llama-3.1-8B-Instruct"

drive.mount("/content/drive")
audio_filename = "/content/drive/MyDrive/audio/equations.mp3"

hf_token = userdata.get("HF_TOKEN")
login(hf_token, add_to_git_credential=True)

open_ai_key = userdata.get("OPENAI_API_KEY")
openai = OpenAI(api_key=open_ai_key)

audio_file = open(audio_filename, "rb")
transcription = openai.audio.transcriptions.create(model=AUDIO_MODEL, file=audio_file, response_format="text")
print(transcription)

system_message = "You are an assistant that produces a summary of audio lessons on a technical nature, including a summary and key points, with examples as necessary."
user_prompt = "Below is audio from a video, please provide a summary. " + transcription

messages = [
    {"role": "system", "content": system_message},
    {"role": "user", "content": user_prompt}
]

quant_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

tokenizer = AutoTokenizer.from_pretrained(LLAMA)
tokenizer.pad_token = tokenizer.eos_token
inuts = tokenizer.apply_chat_template(messages, return_tensors="pt").to("cuda")
streamer = TextStreamer(tokenizer)
model = AutoModelForCausalLM.from_pretrained(LLAMA, quantization_config=quant_config, device_map="auto")
outputs = model.generate(inputs=inuts, streamer=streamer, max_new_tokens=2000)

response = tokenizer.decode(outputs[0])

display(Markdown(response))

